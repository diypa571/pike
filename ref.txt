Starting with pike...
1- Downloading pike for linux and installing using make
https://pike.lysator.liu.se/pub/pike/latest-stable/Pike-v8.0.1738.tar.gz

wget https://pike.lysator.liu.se/pub/pike/latest-stable/Pike-v8.0.1738.tar.gz
tar -xf Pike-v8.0.1738.tar.gz
cd Pike-v8.0.1738
sudo make install

2- The language
2.1 Commments
// Yes, Pike is another language... I feel Iam programming in C, yes allmost C, maybe simpler.
/*
Follow c to catch the pike
*/

2.3  Playing with strings...
// Starting with the first pike program
int main() {
    write("My first pike!\n");
    return 0;
}



2.4 Run the the pike file..
pike filename.pike


2.5 Functions

// *********** Creating functions ************
function addParameters(a, b) {
    return a + b;
}

write(addParameters(16, 10) + "\n");


 


2.4 Data types in Pike
Integer (int): Represents whole numbers, such as -10, 0, 42.

Float (float): Represents floating-point numbers with decimal places, such as 3.14, -0.5, 1.0.

String (string): Represents sequences of characters enclosed in double quotes, such as "Hello", "Pike", "123".

Array (array): Represents an ordered collection of values. Elements in an array can be of any data type, including other arrays.

Mapping (mapping): Represents a set of key-value pairs. Each key in a mapping is unique, and the corresponding value can be accessed using the key.

Object (object): Pike supports object-oriented programming, allowing you to define custom objects with their own properties and methods.

Function (function): Functions in Pike are first-class citizens and can be assigned to variables, passed as arguments, and returned from other functions.

Mixed (mixed): The mixed data type can hold values of any type. 
It is often used when a variable needs to store different types of values at different times.

Void (void): Represents the absence of a value. 



2.5 Variables in pike

int kilo = 25;     
float pi = 3.14;      
string name = "GateKeeper";    
array numbers = ({1, 2, 3}); // Array 

mapping startrek = ([         // Mapping variable
    "grid": 01,
    "heading": 101,
    "destinaton": 200
]);



2.6 Example startrek.pike
mapping startrek = ([
    "grid": 01,
    "heading": 101,
    "destination": 200
]);

int main() {
    // Accessing values from the mapping
    int grid = startrek["grid"];
    int heading = startrek["heading"];
    int destination = startrek["destination"];

    // Printing the values
    write("Grid: " + grid + "\n");
    write("Heading: " + heading + "\n");
    write("Destination: " + destination + "\n");

    return 0;
}



2.7 Loop
for (int i = 1; i <= 5; i++) {
    write(" IAM  UFO NUMBER " + i + "\n");
}



************Class**********
2.8 Classes
class StarTrekSpecies {
    string speciesName;

    // Konstruktor
    void create(string name) {
        speciesName = name;
    }

    
    void displayDetails() {
        write("Species: " + speciesName + "\n");
        write("Home Planet: " + getHomePlanet() + "\n");
        write("Faction: " + getFaction() + "\n");
    }

    // Virtuaela metoder
    virtual string getHomePlanet() {
        return "";
    }

    // Virtual method to get faction (to be overridden by subclasses)
    virtual string getFaction() {
        return "";
    }
}

class Human extends StarTrekSpecies {
    string getHomePlanet() {
        return "Earth";
    }

    string getFaction() {
        return "United Federation of Planets";
    }
}

class Klingon extends StarTrekSpecies {
    string getHomePlanet() {
        return "Qo'noS";
    }

    string getFaction() {
        return "Klingon Empire";
    }
}

class Cardassian extends StarTrekSpecies {
    string getHomePlanet() {
        return "Cardassia Prime";
    }

    string getFaction() {
        return "Cardassian Union";
    }
}

// Main program
int main() {
    // Creating instances of different species
    Human human = Human();
    Klingon klingon = Klingon();
    Cardassian cardassian = Cardassian();

    // Displaying details of each species
    human.create("Human");
    human.displayDetails();

    klingon.create("Klingon");
    klingon.displayDetails();

    cardassian.create("Cardassian");
    cardassian.displayDetails();

    return 0;
}

